"""autogenerated by genpy from semantic_knowledgebase/KBServiceRequest.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class KBServiceRequest(genpy.Message):
  _md5sum = "b76fc5bfeb3d8654d3f087afc92dbec3"
  _type = "semantic_knowledgebase/KBServiceRequest"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """string object_category_request


"""
  __slots__ = ['object_category_request']
  _slot_types = ['string']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       object_category_request

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(KBServiceRequest, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.object_category_request is None:
        self.object_category_request = ''
    else:
      self.object_category_request = ''

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.object_category_request
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.object_category_request = str[start:end].decode('utf-8')
      else:
        self.object_category_request = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.object_category_request
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.object_category_request = str[start:end].decode('utf-8')
      else:
        self.object_category_request = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
"""autogenerated by genpy from semantic_knowledgebase/KBServiceResponse.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import geometry_msgs.msg
import semantic_knowledgebase.msg

class KBServiceResponse(genpy.Message):
  _md5sum = "e57a37b2874ff7bbebd06c1375326937"
  _type = "semantic_knowledgebase/KBServiceResponse"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """ObjectList object_list



================================================================================
MSG: semantic_knowledgebase/ObjectList
Object[] objects 

================================================================================
MSG: semantic_knowledgebase/Object

ObjectInstance  instance
GeometricProperties geometry
SemanticProperties semantics




================================================================================
MSG: semantic_knowledgebase/ObjectInstance
string name


================================================================================
MSG: semantic_knowledgebase/GeometricProperties
geometry_msgs/Pose pose
BoundingBox bounding_box


================================================================================
MSG: geometry_msgs/Pose
# A representation of pose in free space, composed of postion and orientation. 
Point position
Quaternion orientation

================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z

================================================================================
MSG: geometry_msgs/Quaternion
# This represents an orientation in free space in quaternion form.

float64 x
float64 y
float64 z
float64 w

================================================================================
MSG: semantic_knowledgebase/BoundingBox
geometry_msgs/Vector3[] vertices

================================================================================
MSG: geometry_msgs/Vector3
# This represents a vector in free space. 

float64 x
float64 y
float64 z
================================================================================
MSG: semantic_knowledgebase/SemanticProperties
string category
string sub_category

"""
  __slots__ = ['object_list']
  _slot_types = ['semantic_knowledgebase/ObjectList']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       object_list

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(KBServiceResponse, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.object_list is None:
        self.object_list = semantic_knowledgebase.msg.ObjectList()
    else:
      self.object_list = semantic_knowledgebase.msg.ObjectList()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      length = len(self.object_list.objects)
      buff.write(_struct_I.pack(length))
      for val1 in self.object_list.objects:
        _v1 = val1.instance
        _x = _v1.name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _v2 = val1.geometry
        _v3 = _v2.pose
        _v4 = _v3.position
        _x = _v4
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        _v5 = _v3.orientation
        _x = _v5
        buff.write(_struct_4d.pack(_x.x, _x.y, _x.z, _x.w))
        _v6 = _v2.bounding_box
        length = len(_v6.vertices)
        buff.write(_struct_I.pack(length))
        for val4 in _v6.vertices:
          _x = val4
          buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        _v7 = val1.semantics
        _x = _v7.category
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = _v7.sub_category
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.object_list is None:
        self.object_list = semantic_knowledgebase.msg.ObjectList()
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.object_list.objects = []
      for i in range(0, length):
        val1 = semantic_knowledgebase.msg.Object()
        _v8 = val1.instance
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v8.name = str[start:end].decode('utf-8')
        else:
          _v8.name = str[start:end]
        _v9 = val1.geometry
        _v10 = _v9.pose
        _v11 = _v10.position
        _x = _v11
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        _v12 = _v10.orientation
        _x = _v12
        start = end
        end += 32
        (_x.x, _x.y, _x.z, _x.w,) = _struct_4d.unpack(str[start:end])
        _v13 = _v9.bounding_box
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v13.vertices = []
        for i in range(0, length):
          val4 = geometry_msgs.msg.Vector3()
          _x = val4
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
          _v13.vertices.append(val4)
        _v14 = val1.semantics
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v14.category = str[start:end].decode('utf-8')
        else:
          _v14.category = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v14.sub_category = str[start:end].decode('utf-8')
        else:
          _v14.sub_category = str[start:end]
        self.object_list.objects.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      length = len(self.object_list.objects)
      buff.write(_struct_I.pack(length))
      for val1 in self.object_list.objects:
        _v15 = val1.instance
        _x = _v15.name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _v16 = val1.geometry
        _v17 = _v16.pose
        _v18 = _v17.position
        _x = _v18
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        _v19 = _v17.orientation
        _x = _v19
        buff.write(_struct_4d.pack(_x.x, _x.y, _x.z, _x.w))
        _v20 = _v16.bounding_box
        length = len(_v20.vertices)
        buff.write(_struct_I.pack(length))
        for val4 in _v20.vertices:
          _x = val4
          buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        _v21 = val1.semantics
        _x = _v21.category
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = _v21.sub_category
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.object_list is None:
        self.object_list = semantic_knowledgebase.msg.ObjectList()
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.object_list.objects = []
      for i in range(0, length):
        val1 = semantic_knowledgebase.msg.Object()
        _v22 = val1.instance
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v22.name = str[start:end].decode('utf-8')
        else:
          _v22.name = str[start:end]
        _v23 = val1.geometry
        _v24 = _v23.pose
        _v25 = _v24.position
        _x = _v25
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        _v26 = _v24.orientation
        _x = _v26
        start = end
        end += 32
        (_x.x, _x.y, _x.z, _x.w,) = _struct_4d.unpack(str[start:end])
        _v27 = _v23.bounding_box
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v27.vertices = []
        for i in range(0, length):
          val4 = geometry_msgs.msg.Vector3()
          _x = val4
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
          _v27.vertices.append(val4)
        _v28 = val1.semantics
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v28.category = str[start:end].decode('utf-8')
        else:
          _v28.category = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v28.sub_category = str[start:end].decode('utf-8')
        else:
          _v28.sub_category = str[start:end]
        self.object_list.objects.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_4d = struct.Struct("<4d")
_struct_3d = struct.Struct("<3d")
class KBService(object):
  _type          = 'semantic_knowledgebase/KBService'
  _md5sum = '46cf32d53ca973a4c06e2a326f3baeb5'
  _request_class  = KBServiceRequest
  _response_class = KBServiceResponse
