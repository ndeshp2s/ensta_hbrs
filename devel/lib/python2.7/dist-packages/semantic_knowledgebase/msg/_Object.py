"""autogenerated by genpy from semantic_knowledgebase/Object.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import geometry_msgs.msg
import semantic_knowledgebase.msg

class Object(genpy.Message):
  _md5sum = "e201121effcd15acabe85f6a248de10b"
  _type = "semantic_knowledgebase/Object"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """
ObjectInstance  instance
GeometricProperties geometry
SemanticProperties semantics




================================================================================
MSG: semantic_knowledgebase/ObjectInstance
string name


================================================================================
MSG: semantic_knowledgebase/GeometricProperties
geometry_msgs/Pose pose
BoundingBox bounding_box


================================================================================
MSG: geometry_msgs/Pose
# A representation of pose in free space, composed of postion and orientation. 
Point position
Quaternion orientation

================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z

================================================================================
MSG: geometry_msgs/Quaternion
# This represents an orientation in free space in quaternion form.

float64 x
float64 y
float64 z
float64 w

================================================================================
MSG: semantic_knowledgebase/BoundingBox
geometry_msgs/Vector3[] vertices

================================================================================
MSG: geometry_msgs/Vector3
# This represents a vector in free space. 

float64 x
float64 y
float64 z
================================================================================
MSG: semantic_knowledgebase/SemanticProperties
string category
string sub_category

"""
  __slots__ = ['instance','geometry','semantics']
  _slot_types = ['semantic_knowledgebase/ObjectInstance','semantic_knowledgebase/GeometricProperties','semantic_knowledgebase/SemanticProperties']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       instance,geometry,semantics

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(Object, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.instance is None:
        self.instance = semantic_knowledgebase.msg.ObjectInstance()
      if self.geometry is None:
        self.geometry = semantic_knowledgebase.msg.GeometricProperties()
      if self.semantics is None:
        self.semantics = semantic_knowledgebase.msg.SemanticProperties()
    else:
      self.instance = semantic_knowledgebase.msg.ObjectInstance()
      self.geometry = semantic_knowledgebase.msg.GeometricProperties()
      self.semantics = semantic_knowledgebase.msg.SemanticProperties()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.instance.name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_7d.pack(_x.geometry.pose.position.x, _x.geometry.pose.position.y, _x.geometry.pose.position.z, _x.geometry.pose.orientation.x, _x.geometry.pose.orientation.y, _x.geometry.pose.orientation.z, _x.geometry.pose.orientation.w))
      length = len(self.geometry.bounding_box.vertices)
      buff.write(_struct_I.pack(length))
      for val1 in self.geometry.bounding_box.vertices:
        _x = val1
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
      _x = self.semantics.category
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.semantics.sub_category
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.instance is None:
        self.instance = semantic_knowledgebase.msg.ObjectInstance()
      if self.geometry is None:
        self.geometry = semantic_knowledgebase.msg.GeometricProperties()
      if self.semantics is None:
        self.semantics = semantic_knowledgebase.msg.SemanticProperties()
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.instance.name = str[start:end].decode('utf-8')
      else:
        self.instance.name = str[start:end]
      _x = self
      start = end
      end += 56
      (_x.geometry.pose.position.x, _x.geometry.pose.position.y, _x.geometry.pose.position.z, _x.geometry.pose.orientation.x, _x.geometry.pose.orientation.y, _x.geometry.pose.orientation.z, _x.geometry.pose.orientation.w,) = _struct_7d.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.geometry.bounding_box.vertices = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Vector3()
        _x = val1
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        self.geometry.bounding_box.vertices.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.semantics.category = str[start:end].decode('utf-8')
      else:
        self.semantics.category = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.semantics.sub_category = str[start:end].decode('utf-8')
      else:
        self.semantics.sub_category = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.instance.name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_7d.pack(_x.geometry.pose.position.x, _x.geometry.pose.position.y, _x.geometry.pose.position.z, _x.geometry.pose.orientation.x, _x.geometry.pose.orientation.y, _x.geometry.pose.orientation.z, _x.geometry.pose.orientation.w))
      length = len(self.geometry.bounding_box.vertices)
      buff.write(_struct_I.pack(length))
      for val1 in self.geometry.bounding_box.vertices:
        _x = val1
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
      _x = self.semantics.category
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.semantics.sub_category
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.instance is None:
        self.instance = semantic_knowledgebase.msg.ObjectInstance()
      if self.geometry is None:
        self.geometry = semantic_knowledgebase.msg.GeometricProperties()
      if self.semantics is None:
        self.semantics = semantic_knowledgebase.msg.SemanticProperties()
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.instance.name = str[start:end].decode('utf-8')
      else:
        self.instance.name = str[start:end]
      _x = self
      start = end
      end += 56
      (_x.geometry.pose.position.x, _x.geometry.pose.position.y, _x.geometry.pose.position.z, _x.geometry.pose.orientation.x, _x.geometry.pose.orientation.y, _x.geometry.pose.orientation.z, _x.geometry.pose.orientation.w,) = _struct_7d.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.geometry.bounding_box.vertices = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Vector3()
        _x = val1
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        self.geometry.bounding_box.vertices.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.semantics.category = str[start:end].decode('utf-8')
      else:
        self.semantics.category = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.semantics.sub_category = str[start:end].decode('utf-8')
      else:
        self.semantics.sub_category = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_7d = struct.Struct("<7d")
_struct_3d = struct.Struct("<3d")
